LIST OF GIT COMMANDS:
=====================
git init
git init <repositoryName>
git rm -r repositoryname/.git ###remove your git repo and end up with a normal directory.
git config --global "user.name" yourfirstname "yourlastname"
git config --global user.email youremailadress
git config user.email "yourEmailAdress"
git config --global color.ui true
git config --global core.editor emacs
git config --global merge.tool opendiff
git config --list
git help
git commandName --help ###give you some help on how to use this git command.
git status
git add filename
git add listoffiles
git add --all
git add .
git add *.extension
git add foldername/*.extension
git add foldername/
git add "*.extension"
git commit
git commit -m "commit message"
git commit -a
git commit -a -m "commit message"
git commit -am "commit message"
git commit --amend -m "new commit message" ###
git reset --soft HEAD^ ###undo last commit, reset into staging and keep changes.
git reset HEAD <fileName> ###untsage files and keep changes in working directory.
git reset --hard sha
git reset --hard HEAD^  ###undo last commit and blow away all changes
git reset --hard HEAD^^ ###undo last two commits and blow away all changes.
git reset --hard ###use it to have a clean index when starting a new orphan branch. Delete all staged file.
git revert sha
git rm --cached <filename> ###unstage files.
git remote
git remote -v ###shows remote repository.
git remote show
git remote show origin
git remote add
git remote add origin <URL> ###add new remote: it takes the name of the remote (origin) and the adress <URL>.
git remote add our_clone  ~/our_clone_directory ###you give this command a name to the remote and its path here
the name is our_clone which is usually origin and the path is ~/our_clone_directory.
git remote rm <name>
git remote push -u <name> <branch>
git remote prune origin ###clean up deleted remote branches
git clone repositoryURL
git clone <pathToRepository> <newName>
git clone <pathToRepository>###clone a repository locally
git branch
git branch branchname
git checkout -- <fileName> ###discard changes in working directory.
git checkout sha ###check code at a specific commit to go back type in
git checkout master
git checkout branchname
git checkout -b branchname
git checkout --orphan gh-pages
git push origin :gh-pages
git branch -d branchname
git branch -r ###list all remote branches
git push origin :remoteBranchName ### delete the remote branch local branch still exist
git branch -d localBranchName ### delete the local branch if you have commits that you haven't pushed yet it will give you a warning
git branch -D localBranchName
git pull origin branchName ###here branchName is the name of the branch that we want to pull from meaning: it could
be a branch other than master, keep in mind that you might be going into merge conflict so don't worry solve the conflict
by choosing which lines to keep and which to delete then keep on working also before pushing to github use git pull so you will have
the latest changes of the repository.
git pull command is equivalent to running git fetch and then run git merge origin/master with master
git pull --rebase
git fetch
git push origin master
git push origin branchname ###push a remote branch
git checkout master
git merge branchname
git log
git log --pretty=oneline
git log --pretty=format:"%h %ad- %s [%an]"
git log --patch
git log --oneline
git log --oneline -p
git log --oneline --stat
git log --oneline --graph
git log --until=1.minute.ago
git log --since=1.day.ago
git log --since=1.hour.ago
git log --since=1.month.ago --until=2.weeks.ago
git log --since=2016-01.01 --until=2016-03-05
git reflog
git reset --hard HEAD@{3} ###restore a deleted commit
git reset --hard sha      ###restore a deleted commit
git log --walk-reflogs
git branch branchname sha_of_the_commit ###restore a deleted branch
git branch branchname HEAD@{1}          ###restore a deelted branch
git diff
git diff --staged
git diff HEAD
git diff HEAD^
git diff HEAD^^
git diff HEAD~5
git diff HEAD^..HEAD
git diff sha1..sha2 ###compare between two commits speciffically
git diff master branchname ###difference between tow branches here master and branchname
git diff --since=1.week.ago --until=1.minute.ago
git blame file.txt --date short
In .git/info/exclude file put in the name of the folder that you want to exclude and git will not track it anymore
===========Exclude Patterns============
file.txt
*.txt
folderName
logs/*.log
=======================================
gitignore file
=======================================
git log --oneline
git tag
git checkout tagName e.g git checkout v1.0.0
git add tag v0.0.1 -m "version 0.0.1"
git push --tags
git rm filename
git rm --cached file.log
git fetch
=========================================================================
git checkout branchname
git rebase master
###this will run the commits from branchname after master's last commit.
=========================================================================
git rebase
git rebase -i HEAD~3 ###3commits before the current HEAD
git rebase --continue
words that you use with the git rebase -i command:
pick
reword ###change commit message.
edit   ###split a commit.
squash ###squash commits together.
================================================================================
git stash
git stash save
git stash save "message"
git stash apply
git stash apply stash @{0}
git stash list
git stash list --stat
git stash show
git stash show stash@{0}
git stash show --patch
git stash apply shtashname
git stash drop
git stash drop stash@{0}
git stash pop ===========> git stash apply + git stash drop
git stash save --keep-index
git stash save --include-untracked
git stash show stashname
git stash branch branchname stash@{0}
git stash clear
================================================================================
LINE ENDINGS ON DIFFERENT OPERATING SYSTEMS
WINDOWS:    \r\n  (crlf: carriage return + line feed)
LINUX/OSX:  \n    (lf:   line feed)
you can set autocrlf to one of those three values:
core.autocrlf=true  (for Windows)
core.autocrlf=false
core.autocrlf=input (for LINUX/OSX)
===================================================================================================
reference:

http://stackoverflow.com/questions/1967370/git-replacing-lf-with-crlf
http://stackoverflow.com/questions/17628305/windows-git-warning-lf-will-be-replaced-by-crlf-is-that-warning-tail-backwar

====================================================================================================
